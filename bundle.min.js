(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

class Bingo {
  constructor(size) {
    this.size = size || 5;
    this.cells = range(this.size*this.size).map((i) => new Cell({number: i}));
    this.range = range(this.size);
    this.reverseRange = range(this.size).reverse();
    this.chanceCount = 0;
  }

  // [{number, color}, ...]
  assign(values) {
    values.forEach((v, i) => {
      this.cells[i].update(v);
    });
  }

  // {number, color}
  update(value) {
    let cell = this.cells.find((c) => c.number === value.number);
    if (cell) {
      cell.update(value);
    }
  }

  at(x, y) {
    return this.cells[y * this.size + x];
  }

  // CHANCE ランプを光らせる
  doChance() {
    if (this.chanceCount < 3) this.chanceCount += 1;
  }

  mustChance() {
    return this.chanceCount < 2 || this.isReached();
  }

  // リーチがひとつでもある
  isReached() {
    return this.sequences().some((cells) => cells.filter((c) => c.isOpened).length >= 4)
  }

  // よこたてななめ
  sequences() {
    let all = [];
    // よこ
    for (let y of this.range) {
      all.push(this.range.map((x) => this.at(x, y)));
    }
    // たて
    for (let x of this.range) {
      all.push(this.range.map((y) => this.at(x, y)));
    }
    // ななめ
    all.push(zip(this.range, this.range).map((xy) => this.at(xy[0], xy[1])));
    all.push(zip(this.range, this.reverseRange).map((xy) => this.at(xy[0], xy[1])));

    return all;
  }
}

module.exports = Bingo;

class Cell {
  constructor(x) {
    this.update(x);
  }

  update(x) {
    if (x.number !== undefined) this.number = x.number;
    if (x.color !== undefined) this.color = x.color;
    if (x.opened_type !== undefined) this.openedType = x.opened_type;
    if (x.can_open !== undefined) this.canOpen = x.can_open !== 0;
  }

  // opened_type 1: 星, 2: ダイヤ, 3: FREE, false: 今飛んできた数字？
  get isOpened() { return [1,2,3,false].indexOf(this.openedType) >= 0; }
}

function range(lo, hi) {
  if (hi === undefined) {
    hi = lo;
    lo = 0;
  }
  if (hi < lo) return undefined;
  let a = new Array(hi - lo);
  for (let i = 0; i < a.length; ++i) {
    a[i] = lo + i;
  }
  return a;
}

function zip(xs, ys) {
  let len = Math.max(xs.length, ys.length);
  return range(len).map((i)=>[xs[i], ys[i]]);
}

},{}],2:[function(require,module,exports){
'use strict';

// gbf.mbga.jp では console.log が潰されている
if (console.log.toString().indexOf('native code') < 0) {
  console.log = Object.getPrototypeOf(console).log;
}
window.onerror = null;

const onAjaxSuccess = require('./on-ajax-success');
const Bingo = require('./bingo');
const lastHit = require('./last-hit');

waitJQuery(main);
function main() {
  console.log('main', jQuery);
  //onAjaxSuccess((board) => console.log('onAjaxSuccess', board));
  // ビンゴをする
  let bingo = new Bingo();
  window.bingo = bingo;
  onAjaxSuccess((board) => {
    if (board.game_status.status === 0) {
      window.bingo = bingo = new Bingo();
    }
  });
  onAjaxSuccess((board) => playBingo(bingo, board));

  // 再プレイボタンを押し続ける
  setInterval(() => jQuery('.btn-play-again').trigger('tap'), 2211);

  // ベット額を決めるダイアログの Play ボタンを押し続ける
  setInterval(() => jQuery('.btn-play-ok').trigger('tap'), 2121);
}

function playBingo(bingo, board) {
  // 盤面にある数字
  if (board.sheet_list) {
    bingo.assign(board.sheet_list);
  }
  // 転がってきた数字
  if (board.hit_list) {
    for (let i in board.hit_list) {
      bingo.update(board.hit_list[i]);
    }
  }
  // チャンスの状態
  if (board.chance_data) {
    bingo.chanceCount = board.chance_data.gauge_level;
  }

  // チャンスしたほうが良ければする
  if (!bingo.mustChance()) return;
  let hit = lastHit(board.hit_list);
  if (!hit) return;
  // 押せるようになるまで数秒かかるので何度か押す
  for (let t = 500; t <= 4000; t += 500) {
    setTimeout(() => tap(hit.number), t);
  }
}

function waitJQuery(f) {
  setTimeout(() => {
    if (typeof jQuery === undefined) return wait(f);
    f();
  }, 100);
}

// 数字がnであるマスを叩く
function tap(n) {
  jQuery(`[data-number='${n}']`).trigger('tap');
}

/*
  div.cnt-bingo
   div.prt-sheet-area
    div.panel-(0-24)
     &.opened
      div[data-number=x]
*/

},{"./bingo":1,"./last-hit":3,"./on-ajax-success":4}],3:[function(require,module,exports){
'use strict';

module.exports = function lastHit(hits) {
  if (!hits) return null;
  return hits[Math.min.apply(Math, Object.keys(hits).map(Number))];
}

},{}],4:[function(require,module,exports){
'use strict';

const lastHit = require('./last-hit');

// ビンゴのデータを受け取った時になにかする
module.exports = function(callback) {
  jQuery(document).ajaxSuccess((event, xhr, settings) => {
    if (settings.url.indexOf('/bingo_init_data/') < 0) return;
    callback(xhr.responseJSON);
  });
}

// いろつけて表示
module.exports.log = function(game) {
  let lines = [''];
  let styles = [];
  // let chance = game.chance_data;
  // lines.push(`chance ${chance.number}, ${chance.gauge_level}`);
  let sheet = game.sheet_list;
  if (!sheet) return;
  for (let y = 0; y < 5; ++y) {
    let texts = [];
    for (let x = 0; x < 5; ++x) {
      let i = y * 5 + x;
      let p = sheet[i];
      texts.push('%c' + (p.number < 10 ? ' ' : '') + p.number);
      let style = '';

      if (p.opened_type) {
        style = 'color: blue; background: white';
      }
      else if ((lastHit(game.hit_list) || {}).number === p.number) {
        style = 'color: red; background: white';
      }
      styles.push(style);
    }
    lines.push(texts.join(' '));
  }
  let args = [].concat([lines.join('\n')], styles);
  console.debug.apply(console, args);
}

},{"./last-hit":3}]},{},[2]);
